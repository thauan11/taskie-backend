"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const userController_1 = require("../controllers/userController");
const taskController_1 = require("../controllers/taskController");
const validateTask_1 = require("../middlewares/validateTask");
const collectionController_1 = require("../controllers/collectionController");
const authorizeRole_1 = require("../middlewares/authorizeRole");
const extractResourceUserId_1 = require("../middlewares/extractResourceUserId");
const router = (0, express_1.Router)();
router.use(extractResourceUserId_1.extractResourceUserId);
router.get('/', (0, authorizeRole_1.authorizeRole)(['admin']), userController_1.getUser);
router.get('/:userId', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), userController_1.getUserSpecific);
router.patch('/:userId', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), userController_1.updateUser);
router.patch('/:userId/portrait', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), userController_1.updateUserPortrait);
router.get('/:userId/collections/:collectionId/tasks', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), validateTask_1.validateCollectionId, taskController_1.getAllTasks);
router.get('/:userId/tasks', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), taskController_1.getUserTasks);
router.get('/:userId/tasks/:taskId', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), validateTask_1.validateTaskId, taskController_1.getSpecificTask);
router.get('/:userId/collections', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), collectionController_1.getCollection);
router.get('/:userId/collection/:collectionId', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), collectionController_1.getCollectionSpecific);
router.post('/:userId/collections', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), validateTask_1.validateCollection, collectionController_1.createCollection);
router.patch('/:userId/collections/:collectionId', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), validateTask_1.validateCollection, collectionController_1.updateCollection);
router.delete('/:userId/collections/:collectionId', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), collectionController_1.deleteCollection);
router.post('/:userId/collections/:collectionId/tasks', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), validateTask_1.validateCollectionId, validateTask_1.validateTaskSchema, taskController_1.createTask);
router.patch('/:userId/tasks/:taskId', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), validateTask_1.validateTaskId, taskController_1.updateTask);
router.delete('/:userId/collections/:collectionId/tasks/:taskId', (0, authorizeRole_1.authorizeRole)(['admin', 'user']), validateTask_1.validateTaskId, taskController_1.deleteTask);
exports.default = router;
